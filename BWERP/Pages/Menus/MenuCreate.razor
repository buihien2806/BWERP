@page "/menus/menucreate"
@using BWERP.Models.Menu;
@using BWERP.Repositories.Interfaces;
@using BWERP.Pages.Components;

@inject IMenuApiClient menuApiClient
@inject NavigationManager NavigationManager;
@inject IToastService toastService

@if (parentMenuDtos == null)
{
	<LoadingIndicator></LoadingIndicator>
}
else
{
	<div class="app-content pt-3 p-md-3 p-lg-4">
		<div class="container-xl">
			<h1 class="app-page-title">Create a new menu</h1>
			<hr class="mb-4">
			<div class="row g-4 settings-section">
				<div class="app-card app-card-settings shadow-sm p-4">
					<div class="app-card-body">
						<EditForm Model="menu" OnValidSubmit="SubmitTask">
							<DataAnnotationsValidator />
							<div class="mb-3">
								<label for="Name" class="form-label">Name</label>
								<InputText class="form-control" @bind-Value="menu.Name"></InputText>
								<ValidationMessage For="()=>menu.Name"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="Description" class="form-label">Description</label>
								<InputText class="form-control" @bind-Value="menu.Description"></InputText>
								<ValidationMessage For="()=>menu.Description"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="ParentId" class="form-label">Parent Menu</label>
								<InputSelect class="form-select" @bind-Value="menu.ParentId">
									<option selected value="0">--Select menu--</option>

									@foreach (var parent in parentMenuDtos)
									{
										<option value="@parent.Id">@parent.Name</option>
									}
								</InputSelect>
								<ValidationMessage For="()=>menu.ParentId"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="Icon" class="form-label">Icon</label>
								<InputText class="form-control" @bind-Value="menu.Icon"></InputText>
								<ValidationMessage For="()=>menu.Icon"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="IconPath" class="form-label">Icon Path</label>
								<InputText class="form-control" @bind-Value="menu.IconPath"></InputText>
								<ValidationMessage For="()=>menu.IconPath"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="Url" class="form-label">Url</label>
								<InputText class="form-control" @bind-Value="menu.Url"></InputText>
								<ValidationMessage For="()=>menu.Url"></ValidationMessage>
							</div>
							<div class="mb-3">
								<label for="Url" class="form-label">Sort No.</label>
								<InputNumber class="form-control" @bind-Value="menu.SortOrder"></InputNumber>
								<ValidationMessage For="()=>menu.SortOrder"></ValidationMessage>
							</div>
							<button type="submit" class="btn app-btn-primary">Save Changes</button>
							<a class="btn app-btn-secondary" href="/menus/menulist">Cancel</a>
						</EditForm>
					</div><!--//app-card-body-->
				</div><!--//app-card-->
			</div><!--//row-->
		</div><!--//container-fluid-->
	</div>
	<!--//app-content-->
}

@code {
	private MenuCreateRequest menu = new MenuCreateRequest();
	private List<ParentMenuDto> parentMenuDtos;

	protected override async Task OnInitializedAsync()
	{
		parentMenuDtos = await menuApiClient.GetParentMenu();
	}

	private async Task SubmitTask(EditContext context)
	{
		var result = await menuApiClient.CreateMenu(menu);
		if (result)
		{
			toastService.ShowSuccess($"{menu.Name} has been created successfully.");
			NavigationManager.NavigateTo("/menus/menuList");
		}
		else
		{
			toastService.ShowError($"An error occurred in progress. Please contact to administrator.");

		}
	}
}
